---
// Automatically import all markdown posts from the posts folder
const allPosts = Object.entries(
  await import.meta.glob("../pages/posts/*.md", { eager: true })
).map(([filePath, post]) => {
  // Defensive: ensure post is an object and has frontmatter
  if (!post || typeof post !== "object" || !("frontmatter" in post))
    return null;
  const frontmatter =
    (post as { frontmatter?: Record<string, any> }).frontmatter || {};
  if ("published" in frontmatter && frontmatter.published === false)
    return null;
  const fileName = filePath.split("/").pop() || "";
  return {
    title: "title" in frontmatter ? frontmatter.title : fileName,
    pubDate:
      "pubDate" in frontmatter
        ? frontmatter.pubDate
        : "date" in frontmatter
          ? frontmatter.date
          : "",
    description: "description" in frontmatter ? frontmatter.description : "",
    url: `/posts/${fileName.replace(/\.md$/, "")}`,
  };
});
const latestPosts = (
  allPosts as Array<{
    title: string;
    pubDate: string;
    description: string;
    url: string;
  } | null>
)
  .filter(
    (
      p
    ): p is {
      title: string;
      pubDate: string;
      description: string;
      url: string;
    } => p !== null
  )
  .sort((a, b) =>
    b && a && b.pubDate && a.pubDate ? b.pubDate.localeCompare(a.pubDate) : 0
  )
  .slice(0, 5);
---

<section>
  <h3>Latest Posts</h3>
  <ul>
    {
      latestPosts.length === 0 ? (
        <li>No posts yet.</li>
      ) : (
        latestPosts.map((post) => (
          <li>
            <>
              <a href={post.url}>
                <strong>{post.title}</strong>
              </a>
              <br />
            </>
            <>
              <small>Published: {post.pubDate}</small>
              <br />
            </>
            <span>{post.description}</span>
          </li>
        ))
      )
    }
  </ul>
</section>
